/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } } 

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the ErrorDetailModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ErrorDetailModel{}

// ErrorDetailModel struct for ErrorDetailModel
type ErrorDetailModel struct {
	Field string `json:"field"`
	Issue string `json:"issue"`
	AdditionalProperties map[string]interface{}
}

type _ErrorDetailModel ErrorDetailModel

// NewErrorDetailModel instantiates a new ErrorDetailModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewErrorDetailModel(field string, issue string) *ErrorDetailModel {
	this := ErrorDetailModel{}
	this.Field = field
	this.Issue = issue
	return &this
}

// NewErrorDetailModelWithDefaults instantiates a new ErrorDetailModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewErrorDetailModelWithDefaults() *ErrorDetailModel {
	this := ErrorDetailModel{}
	return &this
}

// GetField returns the Field field value
func (o *ErrorDetailModel) GetField() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Field
}

// GetFieldOk returns a tuple with the Field field value
// and a boolean to check if the value has been set.
func (o *ErrorDetailModel) GetFieldOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Field, true
}

// SetField sets field value
func (o *ErrorDetailModel) SetField(v string) {
	o.Field = v
}

// GetIssue returns the Issue field value
func (o *ErrorDetailModel) GetIssue() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Issue
}

// GetIssueOk returns a tuple with the Issue field value
// and a boolean to check if the value has been set.
func (o *ErrorDetailModel) GetIssueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Issue, true
}

// SetIssue sets field value
func (o *ErrorDetailModel) SetIssue(v string) {
	o.Issue = v
}

func (o ErrorDetailModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ErrorDetailModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["field"] = o.Field
	toSerialize["issue"] = o.Issue

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ErrorDetailModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"field",
		"issue",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varErrorDetailModel := _ErrorDetailModel{}

	err = json.Unmarshal(data, &varErrorDetailModel)

	if err != nil {
		return err
	}

	*o = ErrorDetailModel(varErrorDetailModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "field")
		delete(additionalProperties, "issue")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableErrorDetailModel struct {
	value *ErrorDetailModel
	isSet bool
}

func (v NullableErrorDetailModel) Get() *ErrorDetailModel {
	return v.value
}

func (v *NullableErrorDetailModel) Set(val *ErrorDetailModel) {
	v.value = val
	v.isSet = true
}

func (v NullableErrorDetailModel) IsSet() bool {
	return v.isSet
}

func (v *NullableErrorDetailModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableErrorDetailModel(val *ErrorDetailModel) *NullableErrorDetailModel {
	return &NullableErrorDetailModel{value: val, isSet: true}
}

func (v NullableErrorDetailModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableErrorDetailModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


