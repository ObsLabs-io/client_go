/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } }

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the UserModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserModel{}

// UserModel struct for UserModel
type UserModel struct {
	Id                   string                      `json:"id"`
	Name                 string                      `json:"name"`
	Email                string                      `json:"email"`
	OrganizationsRole    []UserOrganizationRoleModel `json:"organizations_role"`
	ProjectsRole         []UserProjectRoleModel      `json:"projects_role"`
	AdditionalProperties map[string]interface{}
}

type _UserModel UserModel

// NewUserModel instantiates a new UserModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserModel(id string, name string, email string, organizationsRole []UserOrganizationRoleModel, projectsRole []UserProjectRoleModel) *UserModel {
	this := UserModel{}
	this.Id = id
	this.Name = name
	this.Email = email
	this.OrganizationsRole = organizationsRole
	this.ProjectsRole = projectsRole
	return &this
}

// NewUserModelWithDefaults instantiates a new UserModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserModelWithDefaults() *UserModel {
	this := UserModel{}
	return &this
}

// GetId returns the Id field value
func (o *UserModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *UserModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *UserModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *UserModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *UserModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *UserModel) SetName(v string) {
	o.Name = v
}

// GetEmail returns the Email field value
func (o *UserModel) GetEmail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Email
}

// GetEmailOk returns a tuple with the Email field value
// and a boolean to check if the value has been set.
func (o *UserModel) GetEmailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Email, true
}

// SetEmail sets field value
func (o *UserModel) SetEmail(v string) {
	o.Email = v
}

// GetOrganizationsRole returns the OrganizationsRole field value
func (o *UserModel) GetOrganizationsRole() []UserOrganizationRoleModel {
	if o == nil {
		var ret []UserOrganizationRoleModel
		return ret
	}

	return o.OrganizationsRole
}

// GetOrganizationsRoleOk returns a tuple with the OrganizationsRole field value
// and a boolean to check if the value has been set.
func (o *UserModel) GetOrganizationsRoleOk() ([]UserOrganizationRoleModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.OrganizationsRole, true
}

// SetOrganizationsRole sets field value
func (o *UserModel) SetOrganizationsRole(v []UserOrganizationRoleModel) {
	o.OrganizationsRole = v
}

// GetProjectsRole returns the ProjectsRole field value
func (o *UserModel) GetProjectsRole() []UserProjectRoleModel {
	if o == nil {
		var ret []UserProjectRoleModel
		return ret
	}

	return o.ProjectsRole
}

// GetProjectsRoleOk returns a tuple with the ProjectsRole field value
// and a boolean to check if the value has been set.
func (o *UserModel) GetProjectsRoleOk() ([]UserProjectRoleModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.ProjectsRole, true
}

// SetProjectsRole sets field value
func (o *UserModel) SetProjectsRole(v []UserProjectRoleModel) {
	o.ProjectsRole = v
}

func (o UserModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["email"] = o.Email
	toSerialize["organizations_role"] = o.OrganizationsRole
	toSerialize["projects_role"] = o.ProjectsRole

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *UserModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"email",
		"organizations_role",
		"projects_role",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserModel := _UserModel{}

	err = json.Unmarshal(data, &varUserModel)

	if err != nil {
		return err
	}

	*o = UserModel(varUserModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "email")
		delete(additionalProperties, "organizations_role")
		delete(additionalProperties, "projects_role")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableUserModel struct {
	value *UserModel
	isSet bool
}

func (v NullableUserModel) Get() *UserModel {
	return v.value
}

func (v *NullableUserModel) Set(val *UserModel) {
	v.value = val
	v.isSet = true
}

func (v NullableUserModel) IsSet() bool {
	return v.isSet
}

func (v *NullableUserModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserModel(val *UserModel) *NullableUserModel {
	return &NullableUserModel{value: val, isSet: true}
}

func (v NullableUserModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
