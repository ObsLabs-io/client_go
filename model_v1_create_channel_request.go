/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } } 

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the V1CreateChannelRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1CreateChannelRequest{}

// V1CreateChannelRequest struct for V1CreateChannelRequest
type V1CreateChannelRequest struct {
	Name string `json:"name"`
	Emails []V1CreateChannelRequestEmailsInner `json:"emails,omitempty"`
	Webhooks []V1CreateChannelRequestWebhooksInner `json:"webhooks,omitempty"`
	Slacks []V1CreateChannelRequestSlacksInner `json:"slacks,omitempty"`
	Smss []V1CreateChannelRequestSmssInner `json:"smss,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _V1CreateChannelRequest V1CreateChannelRequest

// NewV1CreateChannelRequest instantiates a new V1CreateChannelRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1CreateChannelRequest(name string) *V1CreateChannelRequest {
	this := V1CreateChannelRequest{}
	this.Name = name
	return &this
}

// NewV1CreateChannelRequestWithDefaults instantiates a new V1CreateChannelRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1CreateChannelRequestWithDefaults() *V1CreateChannelRequest {
	this := V1CreateChannelRequest{}
	return &this
}

// GetName returns the Name field value
func (o *V1CreateChannelRequest) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *V1CreateChannelRequest) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *V1CreateChannelRequest) SetName(v string) {
	o.Name = v
}

// GetEmails returns the Emails field value if set, zero value otherwise.
func (o *V1CreateChannelRequest) GetEmails() []V1CreateChannelRequestEmailsInner {
	if o == nil || IsNil(o.Emails) {
		var ret []V1CreateChannelRequestEmailsInner
		return ret
	}
	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CreateChannelRequest) GetEmailsOk() ([]V1CreateChannelRequestEmailsInner, bool) {
	if o == nil || IsNil(o.Emails) {
		return nil, false
	}
	return o.Emails, true
}

// HasEmails returns a boolean if a field has been set.
func (o *V1CreateChannelRequest) HasEmails() bool {
	if o != nil && !IsNil(o.Emails) {
		return true
	}

	return false
}

// SetEmails gets a reference to the given []V1CreateChannelRequestEmailsInner and assigns it to the Emails field.
func (o *V1CreateChannelRequest) SetEmails(v []V1CreateChannelRequestEmailsInner) {
	o.Emails = v
}

// GetWebhooks returns the Webhooks field value if set, zero value otherwise.
func (o *V1CreateChannelRequest) GetWebhooks() []V1CreateChannelRequestWebhooksInner {
	if o == nil || IsNil(o.Webhooks) {
		var ret []V1CreateChannelRequestWebhooksInner
		return ret
	}
	return o.Webhooks
}

// GetWebhooksOk returns a tuple with the Webhooks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CreateChannelRequest) GetWebhooksOk() ([]V1CreateChannelRequestWebhooksInner, bool) {
	if o == nil || IsNil(o.Webhooks) {
		return nil, false
	}
	return o.Webhooks, true
}

// HasWebhooks returns a boolean if a field has been set.
func (o *V1CreateChannelRequest) HasWebhooks() bool {
	if o != nil && !IsNil(o.Webhooks) {
		return true
	}

	return false
}

// SetWebhooks gets a reference to the given []V1CreateChannelRequestWebhooksInner and assigns it to the Webhooks field.
func (o *V1CreateChannelRequest) SetWebhooks(v []V1CreateChannelRequestWebhooksInner) {
	o.Webhooks = v
}

// GetSlacks returns the Slacks field value if set, zero value otherwise.
func (o *V1CreateChannelRequest) GetSlacks() []V1CreateChannelRequestSlacksInner {
	if o == nil || IsNil(o.Slacks) {
		var ret []V1CreateChannelRequestSlacksInner
		return ret
	}
	return o.Slacks
}

// GetSlacksOk returns a tuple with the Slacks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CreateChannelRequest) GetSlacksOk() ([]V1CreateChannelRequestSlacksInner, bool) {
	if o == nil || IsNil(o.Slacks) {
		return nil, false
	}
	return o.Slacks, true
}

// HasSlacks returns a boolean if a field has been set.
func (o *V1CreateChannelRequest) HasSlacks() bool {
	if o != nil && !IsNil(o.Slacks) {
		return true
	}

	return false
}

// SetSlacks gets a reference to the given []V1CreateChannelRequestSlacksInner and assigns it to the Slacks field.
func (o *V1CreateChannelRequest) SetSlacks(v []V1CreateChannelRequestSlacksInner) {
	o.Slacks = v
}

// GetSmss returns the Smss field value if set, zero value otherwise.
func (o *V1CreateChannelRequest) GetSmss() []V1CreateChannelRequestSmssInner {
	if o == nil || IsNil(o.Smss) {
		var ret []V1CreateChannelRequestSmssInner
		return ret
	}
	return o.Smss
}

// GetSmssOk returns a tuple with the Smss field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1CreateChannelRequest) GetSmssOk() ([]V1CreateChannelRequestSmssInner, bool) {
	if o == nil || IsNil(o.Smss) {
		return nil, false
	}
	return o.Smss, true
}

// HasSmss returns a boolean if a field has been set.
func (o *V1CreateChannelRequest) HasSmss() bool {
	if o != nil && !IsNil(o.Smss) {
		return true
	}

	return false
}

// SetSmss gets a reference to the given []V1CreateChannelRequestSmssInner and assigns it to the Smss field.
func (o *V1CreateChannelRequest) SetSmss(v []V1CreateChannelRequestSmssInner) {
	o.Smss = v
}

func (o V1CreateChannelRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1CreateChannelRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !IsNil(o.Emails) {
		toSerialize["emails"] = o.Emails
	}
	if !IsNil(o.Webhooks) {
		toSerialize["webhooks"] = o.Webhooks
	}
	if !IsNil(o.Slacks) {
		toSerialize["slacks"] = o.Slacks
	}
	if !IsNil(o.Smss) {
		toSerialize["smss"] = o.Smss
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1CreateChannelRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"name",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1CreateChannelRequest := _V1CreateChannelRequest{}

	err = json.Unmarshal(data, &varV1CreateChannelRequest)

	if err != nil {
		return err
	}

	*o = V1CreateChannelRequest(varV1CreateChannelRequest)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "name")
		delete(additionalProperties, "emails")
		delete(additionalProperties, "webhooks")
		delete(additionalProperties, "slacks")
		delete(additionalProperties, "smss")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1CreateChannelRequest struct {
	value *V1CreateChannelRequest
	isSet bool
}

func (v NullableV1CreateChannelRequest) Get() *V1CreateChannelRequest {
	return v.value
}

func (v *NullableV1CreateChannelRequest) Set(val *V1CreateChannelRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableV1CreateChannelRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableV1CreateChannelRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1CreateChannelRequest(val *V1CreateChannelRequest) *NullableV1CreateChannelRequest {
	return &NullableV1CreateChannelRequest{value: val, isSet: true}
}

func (v NullableV1CreateChannelRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1CreateChannelRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


