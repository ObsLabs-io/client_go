/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } }

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the ProbeScheduleModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProbeScheduleModel{}

// ProbeScheduleModel struct for ProbeScheduleModel
type ProbeScheduleModel struct {
	Type             string `json:"type"`
	FailureThreshold int32  `json:"failure_threshold"`
	SuccessThreshold int32  `json:"success_threshold"`
	// Required if type is \"cron\"
	Expression *string `json:"expression,omitempty"`
	// Required if type is \"period\"
	PeriodSeconds        *int32 `json:"period_seconds,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ProbeScheduleModel ProbeScheduleModel

// NewProbeScheduleModel instantiates a new ProbeScheduleModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeScheduleModel(type_ string, failureThreshold int32, successThreshold int32) *ProbeScheduleModel {
	this := ProbeScheduleModel{}
	this.Type = type_
	this.FailureThreshold = failureThreshold
	this.SuccessThreshold = successThreshold
	var periodSeconds int32 = 360
	this.PeriodSeconds = &periodSeconds
	return &this
}

// NewProbeScheduleModelWithDefaults instantiates a new ProbeScheduleModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeScheduleModelWithDefaults() *ProbeScheduleModel {
	this := ProbeScheduleModel{}
	var failureThreshold int32 = 1
	this.FailureThreshold = failureThreshold
	var successThreshold int32 = 1
	this.SuccessThreshold = successThreshold
	var periodSeconds int32 = 360
	this.PeriodSeconds = &periodSeconds
	return &this
}

// GetType returns the Type field value
func (o *ProbeScheduleModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProbeScheduleModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProbeScheduleModel) SetType(v string) {
	o.Type = v
}

// GetFailureThreshold returns the FailureThreshold field value
func (o *ProbeScheduleModel) GetFailureThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.FailureThreshold
}

// GetFailureThresholdOk returns a tuple with the FailureThreshold field value
// and a boolean to check if the value has been set.
func (o *ProbeScheduleModel) GetFailureThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FailureThreshold, true
}

// SetFailureThreshold sets field value
func (o *ProbeScheduleModel) SetFailureThreshold(v int32) {
	o.FailureThreshold = v
}

// GetSuccessThreshold returns the SuccessThreshold field value
func (o *ProbeScheduleModel) GetSuccessThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.SuccessThreshold
}

// GetSuccessThresholdOk returns a tuple with the SuccessThreshold field value
// and a boolean to check if the value has been set.
func (o *ProbeScheduleModel) GetSuccessThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SuccessThreshold, true
}

// SetSuccessThreshold sets field value
func (o *ProbeScheduleModel) SetSuccessThreshold(v int32) {
	o.SuccessThreshold = v
}

// GetExpression returns the Expression field value if set, zero value otherwise.
func (o *ProbeScheduleModel) GetExpression() string {
	if o == nil || IsNil(o.Expression) {
		var ret string
		return ret
	}
	return *o.Expression
}

// GetExpressionOk returns a tuple with the Expression field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeScheduleModel) GetExpressionOk() (*string, bool) {
	if o == nil || IsNil(o.Expression) {
		return nil, false
	}
	return o.Expression, true
}

// HasExpression returns a boolean if a field has been set.
func (o *ProbeScheduleModel) HasExpression() bool {
	if o != nil && !IsNil(o.Expression) {
		return true
	}

	return false
}

// SetExpression gets a reference to the given string and assigns it to the Expression field.
func (o *ProbeScheduleModel) SetExpression(v string) {
	o.Expression = &v
}

// GetPeriodSeconds returns the PeriodSeconds field value if set, zero value otherwise.
func (o *ProbeScheduleModel) GetPeriodSeconds() int32 {
	if o == nil || IsNil(o.PeriodSeconds) {
		var ret int32
		return ret
	}
	return *o.PeriodSeconds
}

// GetPeriodSecondsOk returns a tuple with the PeriodSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProbeScheduleModel) GetPeriodSecondsOk() (*int32, bool) {
	if o == nil || IsNil(o.PeriodSeconds) {
		return nil, false
	}
	return o.PeriodSeconds, true
}

// HasPeriodSeconds returns a boolean if a field has been set.
func (o *ProbeScheduleModel) HasPeriodSeconds() bool {
	if o != nil && !IsNil(o.PeriodSeconds) {
		return true
	}

	return false
}

// SetPeriodSeconds gets a reference to the given int32 and assigns it to the PeriodSeconds field.
func (o *ProbeScheduleModel) SetPeriodSeconds(v int32) {
	o.PeriodSeconds = &v
}

func (o ProbeScheduleModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProbeScheduleModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["failure_threshold"] = o.FailureThreshold
	toSerialize["success_threshold"] = o.SuccessThreshold
	if !IsNil(o.Expression) {
		toSerialize["expression"] = o.Expression
	}
	if !IsNil(o.PeriodSeconds) {
		toSerialize["period_seconds"] = o.PeriodSeconds
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProbeScheduleModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"failure_threshold",
		"success_threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProbeScheduleModel := _ProbeScheduleModel{}

	err = json.Unmarshal(data, &varProbeScheduleModel)

	if err != nil {
		return err
	}

	*o = ProbeScheduleModel(varProbeScheduleModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "failure_threshold")
		delete(additionalProperties, "success_threshold")
		delete(additionalProperties, "expression")
		delete(additionalProperties, "period_seconds")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProbeScheduleModel struct {
	value *ProbeScheduleModel
	isSet bool
}

func (v NullableProbeScheduleModel) Get() *ProbeScheduleModel {
	return v.value
}

func (v *NullableProbeScheduleModel) Set(val *ProbeScheduleModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeScheduleModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeScheduleModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeScheduleModel(val *ProbeScheduleModel) *NullableProbeScheduleModel {
	return &NullableProbeScheduleModel{value: val, isSet: true}
}

func (v NullableProbeScheduleModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeScheduleModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
