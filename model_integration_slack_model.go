/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } } 

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the IntegrationSlackModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &IntegrationSlackModel{}

// IntegrationSlackModel struct for IntegrationSlackModel
type IntegrationSlackModel struct {
	TeamId string `json:"team_id"`
	TeamName string `json:"team_name"`
	ChannelId string `json:"channel_id"`
	Channel string `json:"channel"`
	AdditionalProperties map[string]interface{}
}

type _IntegrationSlackModel IntegrationSlackModel

// NewIntegrationSlackModel instantiates a new IntegrationSlackModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewIntegrationSlackModel(teamId string, teamName string, channelId string, channel string) *IntegrationSlackModel {
	this := IntegrationSlackModel{}
	this.TeamId = teamId
	this.TeamName = teamName
	this.ChannelId = channelId
	this.Channel = channel
	return &this
}

// NewIntegrationSlackModelWithDefaults instantiates a new IntegrationSlackModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewIntegrationSlackModelWithDefaults() *IntegrationSlackModel {
	this := IntegrationSlackModel{}
	return &this
}

// GetTeamId returns the TeamId field value
func (o *IntegrationSlackModel) GetTeamId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamId
}

// GetTeamIdOk returns a tuple with the TeamId field value
// and a boolean to check if the value has been set.
func (o *IntegrationSlackModel) GetTeamIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamId, true
}

// SetTeamId sets field value
func (o *IntegrationSlackModel) SetTeamId(v string) {
	o.TeamId = v
}

// GetTeamName returns the TeamName field value
func (o *IntegrationSlackModel) GetTeamName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.TeamName
}

// GetTeamNameOk returns a tuple with the TeamName field value
// and a boolean to check if the value has been set.
func (o *IntegrationSlackModel) GetTeamNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TeamName, true
}

// SetTeamName sets field value
func (o *IntegrationSlackModel) SetTeamName(v string) {
	o.TeamName = v
}

// GetChannelId returns the ChannelId field value
func (o *IntegrationSlackModel) GetChannelId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ChannelId
}

// GetChannelIdOk returns a tuple with the ChannelId field value
// and a boolean to check if the value has been set.
func (o *IntegrationSlackModel) GetChannelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ChannelId, true
}

// SetChannelId sets field value
func (o *IntegrationSlackModel) SetChannelId(v string) {
	o.ChannelId = v
}

// GetChannel returns the Channel field value
func (o *IntegrationSlackModel) GetChannel() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Channel
}

// GetChannelOk returns a tuple with the Channel field value
// and a boolean to check if the value has been set.
func (o *IntegrationSlackModel) GetChannelOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Channel, true
}

// SetChannel sets field value
func (o *IntegrationSlackModel) SetChannel(v string) {
	o.Channel = v
}

func (o IntegrationSlackModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o IntegrationSlackModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["team_id"] = o.TeamId
	toSerialize["team_name"] = o.TeamName
	toSerialize["channel_id"] = o.ChannelId
	toSerialize["channel"] = o.Channel

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *IntegrationSlackModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"team_id",
		"team_name",
		"channel_id",
		"channel",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varIntegrationSlackModel := _IntegrationSlackModel{}

	err = json.Unmarshal(data, &varIntegrationSlackModel)

	if err != nil {
		return err
	}

	*o = IntegrationSlackModel(varIntegrationSlackModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "team_id")
		delete(additionalProperties, "team_name")
		delete(additionalProperties, "channel_id")
		delete(additionalProperties, "channel")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableIntegrationSlackModel struct {
	value *IntegrationSlackModel
	isSet bool
}

func (v NullableIntegrationSlackModel) Get() *IntegrationSlackModel {
	return v.value
}

func (v *NullableIntegrationSlackModel) Set(val *IntegrationSlackModel) {
	v.value = val
	v.isSet = true
}

func (v NullableIntegrationSlackModel) IsSet() bool {
	return v.isSet
}

func (v *NullableIntegrationSlackModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableIntegrationSlackModel(val *IntegrationSlackModel) *NullableIntegrationSlackModel {
	return &NullableIntegrationSlackModel{value: val, isSet: true}
}

func (v NullableIntegrationSlackModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableIntegrationSlackModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


