/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } } 

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the ProbeModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProbeModel{}

// ProbeModel struct for ProbeModel
type ProbeModel struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Type string `json:"type"`
	Url string `json:"url"`
	Status string `json:"status"`
	StatusCheckedAt NullableTime `json:"status_checked_at"`
	StatusChangedAt NullableTime `json:"status_changed_at"`
	Schedule ProbeScheduleModel `json:"schedule"`
	Channels []ProbeChannelModel `json:"channels"`
	AdditionalProperties map[string]interface{}
}

type _ProbeModel ProbeModel

// NewProbeModel instantiates a new ProbeModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProbeModel(id string, name string, type_ string, url string, status string, statusCheckedAt NullableTime, statusChangedAt NullableTime, schedule ProbeScheduleModel, channels []ProbeChannelModel) *ProbeModel {
	this := ProbeModel{}
	this.Id = id
	this.Name = name
	this.Type = type_
	this.Url = url
	this.Status = status
	this.StatusCheckedAt = statusCheckedAt
	this.StatusChangedAt = statusChangedAt
	this.Schedule = schedule
	this.Channels = channels
	return &this
}

// NewProbeModelWithDefaults instantiates a new ProbeModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProbeModelWithDefaults() *ProbeModel {
	this := ProbeModel{}
	return &this
}

// GetId returns the Id field value
func (o *ProbeModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ProbeModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ProbeModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ProbeModel) SetName(v string) {
	o.Name = v
}

// GetType returns the Type field value
func (o *ProbeModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProbeModel) SetType(v string) {
	o.Type = v
}

// GetUrl returns the Url field value
func (o *ProbeModel) GetUrl() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Url
}

// GetUrlOk returns a tuple with the Url field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Url, true
}

// SetUrl sets field value
func (o *ProbeModel) SetUrl(v string) {
	o.Url = v
}

// GetStatus returns the Status field value
func (o *ProbeModel) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProbeModel) SetStatus(v string) {
	o.Status = v
}

// GetStatusCheckedAt returns the StatusCheckedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ProbeModel) GetStatusCheckedAt() time.Time {
	if o == nil || o.StatusCheckedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.StatusCheckedAt.Get()
}

// GetStatusCheckedAtOk returns a tuple with the StatusCheckedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeModel) GetStatusCheckedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusCheckedAt.Get(), o.StatusCheckedAt.IsSet()
}

// SetStatusCheckedAt sets field value
func (o *ProbeModel) SetStatusCheckedAt(v time.Time) {
	o.StatusCheckedAt.Set(&v)
}

// GetStatusChangedAt returns the StatusChangedAt field value
// If the value is explicit nil, the zero value for time.Time will be returned
func (o *ProbeModel) GetStatusChangedAt() time.Time {
	if o == nil || o.StatusChangedAt.Get() == nil {
		var ret time.Time
		return ret
	}

	return *o.StatusChangedAt.Get()
}

// GetStatusChangedAtOk returns a tuple with the StatusChangedAt field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ProbeModel) GetStatusChangedAtOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.StatusChangedAt.Get(), o.StatusChangedAt.IsSet()
}

// SetStatusChangedAt sets field value
func (o *ProbeModel) SetStatusChangedAt(v time.Time) {
	o.StatusChangedAt.Set(&v)
}

// GetSchedule returns the Schedule field value
func (o *ProbeModel) GetSchedule() ProbeScheduleModel {
	if o == nil {
		var ret ProbeScheduleModel
		return ret
	}

	return o.Schedule
}

// GetScheduleOk returns a tuple with the Schedule field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetScheduleOk() (ProbeScheduleModel, bool) {
	if o == nil {
		return ProbeScheduleModel{}, false
	}
	return o.Schedule, true
}

// SetSchedule sets field value
func (o *ProbeModel) SetSchedule(v ProbeScheduleModel) {
	o.Schedule = v
}

// GetChannels returns the Channels field value
func (o *ProbeModel) GetChannels() []ProbeChannelModel {
	if o == nil {
		var ret []ProbeChannelModel
		return ret
	}

	return o.Channels
}

// GetChannelsOk returns a tuple with the Channels field value
// and a boolean to check if the value has been set.
func (o *ProbeModel) GetChannelsOk() ([]ProbeChannelModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Channels, true
}

// SetChannels sets field value
func (o *ProbeModel) SetChannels(v []ProbeChannelModel) {
	o.Channels = v
}

func (o ProbeModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProbeModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["type"] = o.Type
	toSerialize["url"] = o.Url
	toSerialize["status"] = o.Status
	toSerialize["status_checked_at"] = o.StatusCheckedAt.Get()
	toSerialize["status_changed_at"] = o.StatusChangedAt.Get()
	toSerialize["schedule"] = o.Schedule
	toSerialize["channels"] = o.Channels

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProbeModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"type",
		"url",
		"status",
		"status_checked_at",
		"status_changed_at",
		"schedule",
		"channels",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProbeModel := _ProbeModel{}

	err = json.Unmarshal(data, &varProbeModel)

	if err != nil {
		return err
	}

	*o = ProbeModel(varProbeModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "type")
		delete(additionalProperties, "url")
		delete(additionalProperties, "status")
		delete(additionalProperties, "status_checked_at")
		delete(additionalProperties, "status_changed_at")
		delete(additionalProperties, "schedule")
		delete(additionalProperties, "channels")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProbeModel struct {
	value *ProbeModel
	isSet bool
}

func (v NullableProbeModel) Get() *ProbeModel {
	return v.value
}

func (v *NullableProbeModel) Set(val *ProbeModel) {
	v.value = val
	v.isSet = true
}

func (v NullableProbeModel) IsSet() bool {
	return v.isSet
}

func (v *NullableProbeModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProbeModel(val *ProbeModel) *NullableProbeModel {
	return &NullableProbeModel{value: val, isSet: true}
}

func (v NullableProbeModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProbeModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


