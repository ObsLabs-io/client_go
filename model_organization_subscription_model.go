/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } }

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
	"time"
)

// checks if the OrganizationSubscriptionModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationSubscriptionModel{}

// OrganizationSubscriptionModel struct for OrganizationSubscriptionModel
type OrganizationSubscriptionModel struct {
	Id                   string                                        `json:"id"`
	Plan                 string                                        `json:"plan"`
	Status               string                                        `json:"status"`
	NextBilledAt         *time.Time                                    `json:"next_billed_at,omitempty"`
	ScheduledChange      *OrganizationSubscriptionScheduledChangeModel `json:"scheduled_change,omitempty"`
	PaddleCustomerId     string                                        `json:"paddle_customer_id"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationSubscriptionModel OrganizationSubscriptionModel

// NewOrganizationSubscriptionModel instantiates a new OrganizationSubscriptionModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationSubscriptionModel(id string, plan string, status string, paddleCustomerId string) *OrganizationSubscriptionModel {
	this := OrganizationSubscriptionModel{}
	this.Id = id
	this.Plan = plan
	this.Status = status
	this.PaddleCustomerId = paddleCustomerId
	return &this
}

// NewOrganizationSubscriptionModelWithDefaults instantiates a new OrganizationSubscriptionModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationSubscriptionModelWithDefaults() *OrganizationSubscriptionModel {
	this := OrganizationSubscriptionModel{}
	return &this
}

// GetId returns the Id field value
func (o *OrganizationSubscriptionModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrganizationSubscriptionModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrganizationSubscriptionModel) SetId(v string) {
	o.Id = v
}

// GetPlan returns the Plan field value
func (o *OrganizationSubscriptionModel) GetPlan() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Plan
}

// GetPlanOk returns a tuple with the Plan field value
// and a boolean to check if the value has been set.
func (o *OrganizationSubscriptionModel) GetPlanOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Plan, true
}

// SetPlan sets field value
func (o *OrganizationSubscriptionModel) SetPlan(v string) {
	o.Plan = v
}

// GetStatus returns the Status field value
func (o *OrganizationSubscriptionModel) GetStatus() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OrganizationSubscriptionModel) GetStatusOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OrganizationSubscriptionModel) SetStatus(v string) {
	o.Status = v
}

// GetNextBilledAt returns the NextBilledAt field value if set, zero value otherwise.
func (o *OrganizationSubscriptionModel) GetNextBilledAt() time.Time {
	if o == nil || IsNil(o.NextBilledAt) {
		var ret time.Time
		return ret
	}
	return *o.NextBilledAt
}

// GetNextBilledAtOk returns a tuple with the NextBilledAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationSubscriptionModel) GetNextBilledAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.NextBilledAt) {
		return nil, false
	}
	return o.NextBilledAt, true
}

// HasNextBilledAt returns a boolean if a field has been set.
func (o *OrganizationSubscriptionModel) HasNextBilledAt() bool {
	if o != nil && !IsNil(o.NextBilledAt) {
		return true
	}

	return false
}

// SetNextBilledAt gets a reference to the given time.Time and assigns it to the NextBilledAt field.
func (o *OrganizationSubscriptionModel) SetNextBilledAt(v time.Time) {
	o.NextBilledAt = &v
}

// GetScheduledChange returns the ScheduledChange field value if set, zero value otherwise.
func (o *OrganizationSubscriptionModel) GetScheduledChange() OrganizationSubscriptionScheduledChangeModel {
	if o == nil || IsNil(o.ScheduledChange) {
		var ret OrganizationSubscriptionScheduledChangeModel
		return ret
	}
	return *o.ScheduledChange
}

// GetScheduledChangeOk returns a tuple with the ScheduledChange field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationSubscriptionModel) GetScheduledChangeOk() (*OrganizationSubscriptionScheduledChangeModel, bool) {
	if o == nil || IsNil(o.ScheduledChange) {
		return nil, false
	}
	return o.ScheduledChange, true
}

// HasScheduledChange returns a boolean if a field has been set.
func (o *OrganizationSubscriptionModel) HasScheduledChange() bool {
	if o != nil && !IsNil(o.ScheduledChange) {
		return true
	}

	return false
}

// SetScheduledChange gets a reference to the given OrganizationSubscriptionScheduledChangeModel and assigns it to the ScheduledChange field.
func (o *OrganizationSubscriptionModel) SetScheduledChange(v OrganizationSubscriptionScheduledChangeModel) {
	o.ScheduledChange = &v
}

// GetPaddleCustomerId returns the PaddleCustomerId field value
func (o *OrganizationSubscriptionModel) GetPaddleCustomerId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PaddleCustomerId
}

// GetPaddleCustomerIdOk returns a tuple with the PaddleCustomerId field value
// and a boolean to check if the value has been set.
func (o *OrganizationSubscriptionModel) GetPaddleCustomerIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PaddleCustomerId, true
}

// SetPaddleCustomerId sets field value
func (o *OrganizationSubscriptionModel) SetPaddleCustomerId(v string) {
	o.PaddleCustomerId = v
}

func (o OrganizationSubscriptionModel) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationSubscriptionModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["plan"] = o.Plan
	toSerialize["status"] = o.Status
	if !IsNil(o.NextBilledAt) {
		toSerialize["next_billed_at"] = o.NextBilledAt
	}
	if !IsNil(o.ScheduledChange) {
		toSerialize["scheduled_change"] = o.ScheduledChange
	}
	toSerialize["paddle_customer_id"] = o.PaddleCustomerId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationSubscriptionModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"plan",
		"status",
		"paddle_customer_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationSubscriptionModel := _OrganizationSubscriptionModel{}

	err = json.Unmarshal(data, &varOrganizationSubscriptionModel)

	if err != nil {
		return err
	}

	*o = OrganizationSubscriptionModel(varOrganizationSubscriptionModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "plan")
		delete(additionalProperties, "status")
		delete(additionalProperties, "next_billed_at")
		delete(additionalProperties, "scheduled_change")
		delete(additionalProperties, "paddle_customer_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationSubscriptionModel struct {
	value *OrganizationSubscriptionModel
	isSet bool
}

func (v NullableOrganizationSubscriptionModel) Get() *OrganizationSubscriptionModel {
	return v.value
}

func (v *NullableOrganizationSubscriptionModel) Set(val *OrganizationSubscriptionModel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationSubscriptionModel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationSubscriptionModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationSubscriptionModel(val *OrganizationSubscriptionModel) *NullableOrganizationSubscriptionModel {
	return &NullableOrganizationSubscriptionModel{value: val, isSet: true}
}

func (v NullableOrganizationSubscriptionModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationSubscriptionModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
