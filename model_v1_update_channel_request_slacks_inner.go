/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } }

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the V1UpdateChannelRequestSlacksInner type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1UpdateChannelRequestSlacksInner{}

// V1UpdateChannelRequestSlacksInner struct for V1UpdateChannelRequestSlacksInner
type V1UpdateChannelRequestSlacksInner struct {
	Id                   *string `json:"id,omitempty"`
	Name                 *string `json:"name,omitempty"`
	IntegrationId        string  `json:"integration_id"`
	AdditionalProperties map[string]interface{}
}

type _V1UpdateChannelRequestSlacksInner V1UpdateChannelRequestSlacksInner

// NewV1UpdateChannelRequestSlacksInner instantiates a new V1UpdateChannelRequestSlacksInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1UpdateChannelRequestSlacksInner(integrationId string) *V1UpdateChannelRequestSlacksInner {
	this := V1UpdateChannelRequestSlacksInner{}
	this.IntegrationId = integrationId
	return &this
}

// NewV1UpdateChannelRequestSlacksInnerWithDefaults instantiates a new V1UpdateChannelRequestSlacksInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1UpdateChannelRequestSlacksInnerWithDefaults() *V1UpdateChannelRequestSlacksInner {
	this := V1UpdateChannelRequestSlacksInner{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *V1UpdateChannelRequestSlacksInner) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateChannelRequestSlacksInner) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *V1UpdateChannelRequestSlacksInner) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *V1UpdateChannelRequestSlacksInner) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1UpdateChannelRequestSlacksInner) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1UpdateChannelRequestSlacksInner) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1UpdateChannelRequestSlacksInner) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1UpdateChannelRequestSlacksInner) SetName(v string) {
	o.Name = &v
}

// GetIntegrationId returns the IntegrationId field value
func (o *V1UpdateChannelRequestSlacksInner) GetIntegrationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.IntegrationId
}

// GetIntegrationIdOk returns a tuple with the IntegrationId field value
// and a boolean to check if the value has been set.
func (o *V1UpdateChannelRequestSlacksInner) GetIntegrationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IntegrationId, true
}

// SetIntegrationId sets field value
func (o *V1UpdateChannelRequestSlacksInner) SetIntegrationId(v string) {
	o.IntegrationId = v
}

func (o V1UpdateChannelRequestSlacksInner) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1UpdateChannelRequestSlacksInner) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["integration_id"] = o.IntegrationId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *V1UpdateChannelRequestSlacksInner) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"integration_id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err
	}

	for _, requiredProperty := range requiredProperties {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varV1UpdateChannelRequestSlacksInner := _V1UpdateChannelRequestSlacksInner{}

	err = json.Unmarshal(data, &varV1UpdateChannelRequestSlacksInner)

	if err != nil {
		return err
	}

	*o = V1UpdateChannelRequestSlacksInner(varV1UpdateChannelRequestSlacksInner)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "integration_id")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableV1UpdateChannelRequestSlacksInner struct {
	value *V1UpdateChannelRequestSlacksInner
	isSet bool
}

func (v NullableV1UpdateChannelRequestSlacksInner) Get() *V1UpdateChannelRequestSlacksInner {
	return v.value
}

func (v *NullableV1UpdateChannelRequestSlacksInner) Set(val *V1UpdateChannelRequestSlacksInner) {
	v.value = val
	v.isSet = true
}

func (v NullableV1UpdateChannelRequestSlacksInner) IsSet() bool {
	return v.isSet
}

func (v *NullableV1UpdateChannelRequestSlacksInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1UpdateChannelRequestSlacksInner(val *V1UpdateChannelRequestSlacksInner) *NullableV1UpdateChannelRequestSlacksInner {
	return &NullableV1UpdateChannelRequestSlacksInner{value: val, isSet: true}
}

func (v NullableV1UpdateChannelRequestSlacksInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1UpdateChannelRequestSlacksInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
