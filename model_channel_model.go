/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } } 

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"fmt"
)

// checks if the ChannelModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChannelModel{}

// ChannelModel struct for ChannelModel
type ChannelModel struct {
	Id string `json:"id"`
	Name string `json:"name"`
	ProjectId string `json:"project_id"`
	Emails []ChannelEmailModel `json:"emails"`
	Webhooks []ChannelWebhookModel `json:"webhooks"`
	Slacks []ChannelSlackModel `json:"slacks"`
	Smss []ChannelSmsModel `json:"smss"`
	AdditionalProperties map[string]interface{}
}

type _ChannelModel ChannelModel

// NewChannelModel instantiates a new ChannelModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChannelModel(id string, name string, projectId string, emails []ChannelEmailModel, webhooks []ChannelWebhookModel, slacks []ChannelSlackModel, smss []ChannelSmsModel) *ChannelModel {
	this := ChannelModel{}
	this.Id = id
	this.Name = name
	this.ProjectId = projectId
	this.Emails = emails
	this.Webhooks = webhooks
	this.Slacks = slacks
	this.Smss = smss
	return &this
}

// NewChannelModelWithDefaults instantiates a new ChannelModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChannelModelWithDefaults() *ChannelModel {
	this := ChannelModel{}
	return &this
}

// GetId returns the Id field value
func (o *ChannelModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChannelModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ChannelModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ChannelModel) SetName(v string) {
	o.Name = v
}

// GetProjectId returns the ProjectId field value
func (o *ChannelModel) GetProjectId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ProjectId
}

// GetProjectIdOk returns a tuple with the ProjectId field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetProjectIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ProjectId, true
}

// SetProjectId sets field value
func (o *ChannelModel) SetProjectId(v string) {
	o.ProjectId = v
}

// GetEmails returns the Emails field value
func (o *ChannelModel) GetEmails() []ChannelEmailModel {
	if o == nil {
		var ret []ChannelEmailModel
		return ret
	}

	return o.Emails
}

// GetEmailsOk returns a tuple with the Emails field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetEmailsOk() ([]ChannelEmailModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Emails, true
}

// SetEmails sets field value
func (o *ChannelModel) SetEmails(v []ChannelEmailModel) {
	o.Emails = v
}

// GetWebhooks returns the Webhooks field value
func (o *ChannelModel) GetWebhooks() []ChannelWebhookModel {
	if o == nil {
		var ret []ChannelWebhookModel
		return ret
	}

	return o.Webhooks
}

// GetWebhooksOk returns a tuple with the Webhooks field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetWebhooksOk() ([]ChannelWebhookModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Webhooks, true
}

// SetWebhooks sets field value
func (o *ChannelModel) SetWebhooks(v []ChannelWebhookModel) {
	o.Webhooks = v
}

// GetSlacks returns the Slacks field value
func (o *ChannelModel) GetSlacks() []ChannelSlackModel {
	if o == nil {
		var ret []ChannelSlackModel
		return ret
	}

	return o.Slacks
}

// GetSlacksOk returns a tuple with the Slacks field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetSlacksOk() ([]ChannelSlackModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Slacks, true
}

// SetSlacks sets field value
func (o *ChannelModel) SetSlacks(v []ChannelSlackModel) {
	o.Slacks = v
}

// GetSmss returns the Smss field value
func (o *ChannelModel) GetSmss() []ChannelSmsModel {
	if o == nil {
		var ret []ChannelSmsModel
		return ret
	}

	return o.Smss
}

// GetSmssOk returns a tuple with the Smss field value
// and a boolean to check if the value has been set.
func (o *ChannelModel) GetSmssOk() ([]ChannelSmsModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Smss, true
}

// SetSmss sets field value
func (o *ChannelModel) SetSmss(v []ChannelSmsModel) {
	o.Smss = v
}

func (o ChannelModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChannelModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["project_id"] = o.ProjectId
	toSerialize["emails"] = o.Emails
	toSerialize["webhooks"] = o.Webhooks
	toSerialize["slacks"] = o.Slacks
	toSerialize["smss"] = o.Smss

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ChannelModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"project_id",
		"emails",
		"webhooks",
		"slacks",
		"smss",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChannelModel := _ChannelModel{}

	err = json.Unmarshal(data, &varChannelModel)

	if err != nil {
		return err
	}

	*o = ChannelModel(varChannelModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "project_id")
		delete(additionalProperties, "emails")
		delete(additionalProperties, "webhooks")
		delete(additionalProperties, "slacks")
		delete(additionalProperties, "smss")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableChannelModel struct {
	value *ChannelModel
	isSet bool
}

func (v NullableChannelModel) Get() *ChannelModel {
	return v.value
}

func (v *NullableChannelModel) Set(val *ChannelModel) {
	v.value = val
	v.isSet = true
}

func (v NullableChannelModel) IsSet() bool {
	return v.isSet
}

func (v *NullableChannelModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChannelModel(val *ChannelModel) *NullableChannelModel {
	return &NullableChannelModel{value: val, isSet: true}
}

func (v NullableChannelModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChannelModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


