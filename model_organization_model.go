/*
ObsLabs API

# Authentication  ObsLabs uses basic auth to authenticate the API. You can create API keys in the account settings. Use your API key as the basic auth password. The username should be left blank (notice the colon sign before api-key that must be included). All requests must be made over https.  Example usage: ```bash curl -u :<YOUR API KEY> https://api.obslabs.io/v1/users/me ```  # Errors  The API returns a structured error response in case of failure. Below is the format of the error response object:  ```json {   \"error\": {     \"status\": 400,     \"code\": \"VALIDATION\",     \"message\": \"Validation errors occurred.\",     \"details\": [       {         \"field\": \"email\",         \"issue\": \"The email address is not in a valid format.\"       },       {         \"field\": \"password\",         \"issue\": \"The password must be at least 8 characters long.\"       }     ]   } } 

API version: 1.0
Contact: contact@obslabs.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client_go

import (
	"encoding/json"
	"time"
	"fmt"
)

// checks if the OrganizationModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrganizationModel{}

// OrganizationModel struct for OrganizationModel
type OrganizationModel struct {
	Id string `json:"id"`
	Name string `json:"name"`
	IsTrial bool `json:"is_trial"`
	TrialEndsAt *time.Time `json:"trial_ends_at,omitempty"`
	Members []OrganizationMemberModel `json:"members"`
	Projects []OrganizationProjectModel `json:"projects"`
	Subscription OrganizationSubscriptionModel `json:"subscription,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _OrganizationModel OrganizationModel

// NewOrganizationModel instantiates a new OrganizationModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganizationModel(id string, name string, isTrial bool, members []OrganizationMemberModel, projects []OrganizationProjectModel) *OrganizationModel {
	this := OrganizationModel{}
	this.Id = id
	this.Name = name
	this.IsTrial = isTrial
	this.Members = members
	this.Projects = projects
	return &this
}

// NewOrganizationModelWithDefaults instantiates a new OrganizationModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganizationModelWithDefaults() *OrganizationModel {
	this := OrganizationModel{}
	return &this
}

// GetId returns the Id field value
func (o *OrganizationModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OrganizationModel) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *OrganizationModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *OrganizationModel) SetName(v string) {
	o.Name = v
}

// GetIsTrial returns the IsTrial field value
func (o *OrganizationModel) GetIsTrial() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsTrial
}

// GetIsTrialOk returns a tuple with the IsTrial field value
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetIsTrialOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsTrial, true
}

// SetIsTrial sets field value
func (o *OrganizationModel) SetIsTrial(v bool) {
	o.IsTrial = v
}

// GetTrialEndsAt returns the TrialEndsAt field value if set, zero value otherwise.
func (o *OrganizationModel) GetTrialEndsAt() time.Time {
	if o == nil || IsNil(o.TrialEndsAt) {
		var ret time.Time
		return ret
	}
	return *o.TrialEndsAt
}

// GetTrialEndsAtOk returns a tuple with the TrialEndsAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetTrialEndsAtOk() (*time.Time, bool) {
	if o == nil || IsNil(o.TrialEndsAt) {
		return nil, false
	}
	return o.TrialEndsAt, true
}

// HasTrialEndsAt returns a boolean if a field has been set.
func (o *OrganizationModel) HasTrialEndsAt() bool {
	if o != nil && !IsNil(o.TrialEndsAt) {
		return true
	}

	return false
}

// SetTrialEndsAt gets a reference to the given time.Time and assigns it to the TrialEndsAt field.
func (o *OrganizationModel) SetTrialEndsAt(v time.Time) {
	o.TrialEndsAt = &v
}

// GetMembers returns the Members field value
func (o *OrganizationModel) GetMembers() []OrganizationMemberModel {
	if o == nil {
		var ret []OrganizationMemberModel
		return ret
	}

	return o.Members
}

// GetMembersOk returns a tuple with the Members field value
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetMembersOk() ([]OrganizationMemberModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Members, true
}

// SetMembers sets field value
func (o *OrganizationModel) SetMembers(v []OrganizationMemberModel) {
	o.Members = v
}

// GetProjects returns the Projects field value
func (o *OrganizationModel) GetProjects() []OrganizationProjectModel {
	if o == nil {
		var ret []OrganizationProjectModel
		return ret
	}

	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetProjectsOk() ([]OrganizationProjectModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.Projects, true
}

// SetProjects sets field value
func (o *OrganizationModel) SetProjects(v []OrganizationProjectModel) {
	o.Projects = v
}

// GetSubscription returns the Subscription field value if set, zero value otherwise.
func (o *OrganizationModel) GetSubscription() OrganizationSubscriptionModel {
	if o == nil || IsNil(o.Subscription) {
		var ret OrganizationSubscriptionModel
		return ret
	}
	return o.Subscription
}

// GetSubscriptionOk returns a tuple with the Subscription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrganizationModel) GetSubscriptionOk() (OrganizationSubscriptionModel, bool) {
	if o == nil || IsNil(o.Subscription) {
		return OrganizationSubscriptionModel{}, false
	}
	return o.Subscription, true
}

// HasSubscription returns a boolean if a field has been set.
func (o *OrganizationModel) HasSubscription() bool {
	if o != nil && !IsNil(o.Subscription) {
		return true
	}

	return false
}

// SetSubscription gets a reference to the given OrganizationSubscriptionModel and assigns it to the Subscription field.
func (o *OrganizationModel) SetSubscription(v OrganizationSubscriptionModel) {
	o.Subscription = v
}

func (o OrganizationModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrganizationModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["is_trial"] = o.IsTrial
	if !IsNil(o.TrialEndsAt) {
		toSerialize["trial_ends_at"] = o.TrialEndsAt
	}
	toSerialize["members"] = o.Members
	toSerialize["projects"] = o.Projects
	if !IsNil(o.Subscription) {
		toSerialize["subscription"] = o.Subscription
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *OrganizationModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"is_trial",
		"members",
		"projects",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOrganizationModel := _OrganizationModel{}

	err = json.Unmarshal(data, &varOrganizationModel)

	if err != nil {
		return err
	}

	*o = OrganizationModel(varOrganizationModel)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "id")
		delete(additionalProperties, "name")
		delete(additionalProperties, "is_trial")
		delete(additionalProperties, "trial_ends_at")
		delete(additionalProperties, "members")
		delete(additionalProperties, "projects")
		delete(additionalProperties, "subscription")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableOrganizationModel struct {
	value *OrganizationModel
	isSet bool
}

func (v NullableOrganizationModel) Get() *OrganizationModel {
	return v.value
}

func (v *NullableOrganizationModel) Set(val *OrganizationModel) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganizationModel) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganizationModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganizationModel(val *OrganizationModel) *NullableOrganizationModel {
	return &NullableOrganizationModel{value: val, isSet: true}
}

func (v NullableOrganizationModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganizationModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


